// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: state.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateService_CreateBlock_FullMethodName         = "/state.StateService/CreateBlock"
	StateService_GetAccountByAddress_FullMethodName = "/state.StateService/GetAccountByAddress"
	StateService_GetLatestBlock_FullMethodName      = "/state.StateService/GetLatestBlock"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateServiceClient interface {
	CreateBlock(ctx context.Context, in *CreateBlockReq, opts ...grpc.CallOption) (*CreateBlockRes, error)
	GetAccountByAddress(ctx context.Context, in *AccountByAddressReq, opts ...grpc.CallOption) (*AccountByAddressRes, error)
	GetLatestBlock(ctx context.Context, in *LastBlockReq, opts ...grpc.CallOption) (*LastBlockRes, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) CreateBlock(ctx context.Context, in *CreateBlockReq, opts ...grpc.CallOption) (*CreateBlockRes, error) {
	out := new(CreateBlockRes)
	err := c.cc.Invoke(ctx, StateService_CreateBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetAccountByAddress(ctx context.Context, in *AccountByAddressReq, opts ...grpc.CallOption) (*AccountByAddressRes, error) {
	out := new(AccountByAddressRes)
	err := c.cc.Invoke(ctx, StateService_GetAccountByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetLatestBlock(ctx context.Context, in *LastBlockReq, opts ...grpc.CallOption) (*LastBlockRes, error) {
	out := new(LastBlockRes)
	err := c.cc.Invoke(ctx, StateService_GetLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility
type StateServiceServer interface {
	CreateBlock(context.Context, *CreateBlockReq) (*CreateBlockRes, error)
	GetAccountByAddress(context.Context, *AccountByAddressReq) (*AccountByAddressRes, error)
	GetLatestBlock(context.Context, *LastBlockReq) (*LastBlockRes, error)
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) CreateBlock(context.Context, *CreateBlockReq) (*CreateBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (UnimplementedStateServiceServer) GetAccountByAddress(context.Context, *AccountByAddressReq) (*AccountByAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAddress not implemented")
}
func (UnimplementedStateServiceServer) GetLatestBlock(context.Context, *LastBlockReq) (*LastBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_CreateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).CreateBlock(ctx, req.(*CreateBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_GetAccountByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetAccountByAddress(ctx, req.(*AccountByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_GetLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetLatestBlock(ctx, req.(*LastBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "state.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlock",
			Handler:    _StateService_CreateBlock_Handler,
		},
		{
			MethodName: "GetAccountByAddress",
			Handler:    _StateService_GetAccountByAddress_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _StateService_GetLatestBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "state.proto",
}
