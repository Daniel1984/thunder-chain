// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: statechange.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateChangeService_CreateStateChange_FullMethodName   = "/statechange.StateChangeService/CreateStateChange"
	StateChangeService_GetAccountByAddress_FullMethodName = "/statechange.StateChangeService/GetAccountByAddress"
)

// StateChangeServiceClient is the client API for StateChangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateChangeServiceClient interface {
	CreateStateChange(ctx context.Context, in *CreateStateChangeRequest, opts ...grpc.CallOption) (*CreateStateChangeResponse, error)
	GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error)
}

type stateChangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateChangeServiceClient(cc grpc.ClientConnInterface) StateChangeServiceClient {
	return &stateChangeServiceClient{cc}
}

func (c *stateChangeServiceClient) CreateStateChange(ctx context.Context, in *CreateStateChangeRequest, opts ...grpc.CallOption) (*CreateStateChangeResponse, error) {
	out := new(CreateStateChangeResponse)
	err := c.cc.Invoke(ctx, StateChangeService_CreateStateChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateChangeServiceClient) GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error) {
	out := new(GetAccountByAddressResponse)
	err := c.cc.Invoke(ctx, StateChangeService_GetAccountByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateChangeServiceServer is the server API for StateChangeService service.
// All implementations must embed UnimplementedStateChangeServiceServer
// for forward compatibility
type StateChangeServiceServer interface {
	CreateStateChange(context.Context, *CreateStateChangeRequest) (*CreateStateChangeResponse, error)
	GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error)
	mustEmbedUnimplementedStateChangeServiceServer()
}

// UnimplementedStateChangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateChangeServiceServer struct {
}

func (UnimplementedStateChangeServiceServer) CreateStateChange(context.Context, *CreateStateChangeRequest) (*CreateStateChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStateChange not implemented")
}
func (UnimplementedStateChangeServiceServer) GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAddress not implemented")
}
func (UnimplementedStateChangeServiceServer) mustEmbedUnimplementedStateChangeServiceServer() {}

// UnsafeStateChangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateChangeServiceServer will
// result in compilation errors.
type UnsafeStateChangeServiceServer interface {
	mustEmbedUnimplementedStateChangeServiceServer()
}

func RegisterStateChangeServiceServer(s grpc.ServiceRegistrar, srv StateChangeServiceServer) {
	s.RegisterService(&StateChangeService_ServiceDesc, srv)
}

func _StateChangeService_CreateStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateChangeServiceServer).CreateStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateChangeService_CreateStateChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateChangeServiceServer).CreateStateChange(ctx, req.(*CreateStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateChangeService_GetAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateChangeServiceServer).GetAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateChangeService_GetAccountByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateChangeServiceServer).GetAccountByAddress(ctx, req.(*GetAccountByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateChangeService_ServiceDesc is the grpc.ServiceDesc for StateChangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateChangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statechange.StateChangeService",
	HandlerType: (*StateChangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStateChange",
			Handler:    _StateChangeService_CreateStateChange_Handler,
		},
		{
			MethodName: "GetAccountByAddress",
			Handler:    _StateChangeService_GetAccountByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statechange.proto",
}
