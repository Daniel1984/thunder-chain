// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: mempool.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MempoolService_CreateMempool_FullMethodName       = "/mempool.MempoolService/CreateMempool"
	MempoolService_DeleteMempool_FullMethodName       = "/mempool.MempoolService/DeleteMempool"
	MempoolService_PendingTransactions_FullMethodName = "/mempool.MempoolService/PendingTransactions"
)

// MempoolServiceClient is the client API for MempoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MempoolServiceClient interface {
	CreateMempool(ctx context.Context, in *CreateMempoolRequest, opts ...grpc.CallOption) (*CreateMempoolResponse, error)
	DeleteMempool(ctx context.Context, in *DeleteMempoolRequest, opts ...grpc.CallOption) (*DeleteMempoolResponse, error)
	PendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error)
}

type mempoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMempoolServiceClient(cc grpc.ClientConnInterface) MempoolServiceClient {
	return &mempoolServiceClient{cc}
}

func (c *mempoolServiceClient) CreateMempool(ctx context.Context, in *CreateMempoolRequest, opts ...grpc.CallOption) (*CreateMempoolResponse, error) {
	out := new(CreateMempoolResponse)
	err := c.cc.Invoke(ctx, MempoolService_CreateMempool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolServiceClient) DeleteMempool(ctx context.Context, in *DeleteMempoolRequest, opts ...grpc.CallOption) (*DeleteMempoolResponse, error) {
	out := new(DeleteMempoolResponse)
	err := c.cc.Invoke(ctx, MempoolService_DeleteMempool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolServiceClient) PendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error) {
	out := new(PendingTransactionsResponse)
	err := c.cc.Invoke(ctx, MempoolService_PendingTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MempoolServiceServer is the server API for MempoolService service.
// All implementations must embed UnimplementedMempoolServiceServer
// for forward compatibility
type MempoolServiceServer interface {
	CreateMempool(context.Context, *CreateMempoolRequest) (*CreateMempoolResponse, error)
	DeleteMempool(context.Context, *DeleteMempoolRequest) (*DeleteMempoolResponse, error)
	PendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsResponse, error)
	mustEmbedUnimplementedMempoolServiceServer()
}

// UnimplementedMempoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMempoolServiceServer struct {
}

func (UnimplementedMempoolServiceServer) CreateMempool(context.Context, *CreateMempoolRequest) (*CreateMempoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMempool not implemented")
}
func (UnimplementedMempoolServiceServer) DeleteMempool(context.Context, *DeleteMempoolRequest) (*DeleteMempoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMempool not implemented")
}
func (UnimplementedMempoolServiceServer) PendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingTransactions not implemented")
}
func (UnimplementedMempoolServiceServer) mustEmbedUnimplementedMempoolServiceServer() {}

// UnsafeMempoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MempoolServiceServer will
// result in compilation errors.
type UnsafeMempoolServiceServer interface {
	mustEmbedUnimplementedMempoolServiceServer()
}

func RegisterMempoolServiceServer(s grpc.ServiceRegistrar, srv MempoolServiceServer) {
	s.RegisterService(&MempoolService_ServiceDesc, srv)
}

func _MempoolService_CreateMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMempoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServiceServer).CreateMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MempoolService_CreateMempool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServiceServer).CreateMempool(ctx, req.(*CreateMempoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MempoolService_DeleteMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMempoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServiceServer).DeleteMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MempoolService_DeleteMempool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServiceServer).DeleteMempool(ctx, req.(*DeleteMempoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MempoolService_PendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServiceServer).PendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MempoolService_PendingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServiceServer).PendingTransactions(ctx, req.(*PendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MempoolService_ServiceDesc is the grpc.ServiceDesc for MempoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MempoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mempool.MempoolService",
	HandlerType: (*MempoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMempool",
			Handler:    _MempoolService_CreateMempool_Handler,
		},
		{
			MethodName: "DeleteMempool",
			Handler:    _MempoolService_DeleteMempool_Handler,
		},
		{
			MethodName: "PendingTransactions",
			Handler:    _MempoolService_PendingTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mempool.proto",
}
